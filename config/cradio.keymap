// Copyright (c) 2022 The ZMK Contributors
// SPDX-License-Identifier: MIT
#define ZMK_MOUSE_DEFAULT_MOVE_VAL 2500  // 600
#define ZMK_MOUSE_DEFAULT_SCRL_VAL 20    // 10

#include <dt-bindings/zmk/mouse.h>
#include <behaviors/mouse_keys.dtsi>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

#define MAC 0
#define WIN 1
#define RIG 2
#define LEF 3
#define TRI 4
#define MOUSE 5

&sk {
    quick-release;
};

/ {
    chosen { zmk,charmap = &charmap_us; };

    behaviors {
        ht: hold_tap {
            label = "hold_tap";
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
            quick-tap-ms = <150>;
            bindings = <&kp>, <&kp>;
        };

        sk {
            quick-release;
        };

        mmv {
            acceleration-exponent = <1>;      // 1
            time-to-max-speed-ms = <300>;    // 40
            delay-ms = <0>;                   // 0
        };

        msc {
            acceleration-exponent = <0>;      // 0
            time-to-max-speed-ms = <40>;      // 500
            delay-ms = <0>;                   // 10
        };
    };

    conditional_layers { compatible = "zmk,conditional-layers"; };

    combos {
        compatible = "zmk,combos";

        escape {
            bindings = <&kp ESCAPE>;
            key-positions = <0 1>;
            timeout-ms = <25>;
        };

        caps_word {
            bindings = <&caps_word>;
            key-positions = <10 31 11>;
        };

        caps_letter {
            bindings = <&sk RIGHT_SHIFT>;
            key-positions = <10 31>;
        };

        undo {
            bindings = <&kp LC(Z)>;
            key-positions = <20 31>;
            timeout-ms = <25>;
        };

        aa {
            bindings = <&kp LEFT_BRACKET>;
            key-positions = <9 8>;
            timeout-ms = <25>;
        };

        oe {
            bindings = <&kp SEMICOLON>;
            key-positions = <7 8>;
            timeout-ms = <25>;
        };

        ae {
            bindings = <&kp SINGLE_QUOTE>;
            key-positions = <6 7>;
            timeout-ms = <25>;
        };

        l_aa {
            bindings = <&kp LEFT_BRACKET>;
            key-positions = <31 11>;
        };

        enter {
            bindings = <&kp ENTER>;
            key-positions = <18 19>;
            timeout-ms = <25>;
        };

        space {
            bindings = <&kp SPACE>;
            key-positions = <30 31>;
        };

    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp Q              &kp W           &kp E           &kp R      &kp T            &kp Y      &kp U             &kp I                &kp O                 &kp P
&ht RIGHT_SHIFT A  &kp S           &kp D           &lt 2 F    &kp G            &kp H      &kp J             &kp K                &kp L                 &lt 4 BSLH
&ht LCTRL Z        &ht LEFT_WIN X  &ht LEFT_ALT C  &lt 5 V    &kp B            &kp N      &ht LEFT_SHIFT M  &ht RIGHT_ALT COMMA  &ht RIGHT_WIN PERIOD  &ht RCTRL SLASH
                                                   &lt 3 TAB  &kp BACKSPACE    &kp SPACE  &lt 2 ENTER
            >;
        };

        colemak_dh {
            bindings = <
&kp Q              &kp W           &kp F           &kp P      &kp B            &kp J      &kp L        &kp U           &kp Y         &kp BSLH
&ht RIGHT_SHIFT A  &kp R           &kp S           &lt 2 T    &kp G            &kp M      &kp N        &kp E           &kp I         &lt 4 O
&ht LCTRL Z        &ht LEFT_WIN X  &ht LEFT_ALT C  &lt 5 D    &kp V            &kp K      &ht LSHFT H  &ht RALT COMMA  &ht RWIN DOT  &ht RCTRL FSLH
                                                   &lt 3 TAB  &kp BACKSPACE    &kp SPACE  &lt 2 ENTER
            >;
        };

        numbers {
            bindings = <
&kp EXCLAMATION  &kp LS(N2)  &kp HASH      &kp RA(NUMBER_2)      &kp PERCENT             &kp N6    &kp N7  &kp N8  &kp N9  &kp N0
&kp PLUS         &kp CAPS    &kp C_VOL_DN  &kp C_VOL_UP          &trans                  &kp LEFT  &kp N4  &kp N5  &kp N6  &kp MINUS
&trans           &trans      &trans        &kp C_BRIGHTNESS_DEC  &kp C_BRIGHTNESS_INC    &kp N0    &kp N1  &kp N2  &kp N3  &trans
                                           &kp C_PLAY_PAUSE      &trans                  &trans    &kp N0
            >;
        };

        specialchars {
            bindings = <
&kp EXCL       &kp LS(N2)  &kp HASH  &kp RA(N2)  &kp PERCENT    &kp LS(N6)            &kp LS(N7)                &kp LS(N8)  &kp LS(N9)  &kp LS(N0)
&kp LS(MINUS)  &kp PIPE  &kp GRAVE   &kp PLUS    &trans         &trans                &trans                    &kp RA(N7)  &kp RA(N0)  &kp RA(RBKT)
&trans         &trans      &trans    &kp DELETE  &trans         &kp NON_US_BACKSLASH  &kp LS(NON_US_BACKSLASH)  &kp RA(N8)  &kp RA(N9)  &trans
                                     &trans      &trans         &trans                &trans
            >;
        };

        nav {
            bindings = <
&trans  &mkp MB1        &mmv MOVE_UP    &mkp MB2         &msc SCRL_UP             &kp PAGE_UP    &kp HOME        &kp UP_ARROW    &kp END          &trans
&trans  &mmv MOVE_LEFT  &mmv MOVE_DOWN  &mmv MOVE_RIGHT  &msc SCRL_DOWN	          &kp PAGE_DOWN  &kp LEFT_ARROW  &kp DOWN_ARROW  &kp RIGHT_ARROW  &trans
&trans  &trans          &trans          &trans           &trans                   &trans         &trans          &trans          &trans           &trans
                                        &trans           &trans                   &trans         &trans
            >;
        };

        function {
            bindings = <
&bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4    &trans  &kp F1  &kp F2   &kp F3   &kp F4
&trans        &trans        &trans        &bootloader   &bt BT_CLR      &trans  &kp F5  &kp F6   &kp F7   &kp F8
&trans        &trans        &trans        &trans        &tog 1          &trans  &kp F9  &kp F10  &kp F11  &kp F12
                                          &trans        &trans          &trans  &trans
            >;
        };
    };
};
