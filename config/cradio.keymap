// Copyright (c) 2022 The ZMK Contributors
// SPDX-License-Identifier: MIT

#define ZMK_MOUSE_DEFAULT_MOVE_VAL 2500  // 600
#define ZMK_MOUSE_DEFAULT_SCRL_VAL 20    // 10

#include <dt-bindings/zmk/mouse.h>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

#define MAC 0
#define WIN 1
#define RIG 2
#define LEF 3
#define TRI 4
#define MOUSE 5

/ {
    chosen { zmk,charmap = &charmap_us; };

    behaviors {
        ht: hold_tap {
            label = "hold_tap";
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <220>;
            quick-tap-ms = <150>;
            global-quick-tap;
            bindings = <&kp>, <&kp>;
        };

        mmv {
            acceleration-exponent = <1>;      // 1
            time-to-max-speed-ms = <300>;    // 40
            delay-ms = <0>;                   // 0
        };

        msc {
            acceleration-exponent = <0>;      // 0
            time-to-max-speed-ms = <40>;      // 500
            delay-ms = <0>;                   // 10
        };
    };

    conditional_layers { compatible = "zmk,conditional-layers"; };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp Q              &kp W           &kp E           &kp R        &kp T            &kp Y      &kp U             &kp I                &kp O                 &kp P
&mt RIGHT_SHIFT A  &kp S           &kp D           &lt 2 F      &kp G            &kp H      &kp J             &kp K                &kp L                 &lt 4 SQT
&mt LCTRL Z        &mt LEFT_WIN X  &mt LEFT_ALT C  &kp V        &kp B            &kp N      &mt LEFT_SHIFT M  &mt RIGHT_ALT COMMA  &mt RIGHT_WIN PERIOD  &mt RCTRL MINUS
                                                   &lt LEF TAB  &kp BACKSPACE    &kp SPACE  &lt RIG ENTER
            >;
        };

        windows_layer {
            bindings = <
&kp Q  &kp W       &kp E       &kp R        &kp T         &kp Y      &kp U        &kp I       &kp O       &kp P
&kp A  &ht LALT S  &ht LGUI D  &ht LCTRL F  &kp G         &kp H      &ht RCTRL J  &ht RGUI K  &ht RALT L  &kp BSPC
&kp Z  &kp X       &kp C       &kp V        &kp B         &kp N      &kp M        &kp COMMA   &kp DOT     &kp ENTER
                               &lt LEF TAB  &kp LSHIFT    &kp SPACE  &lt RIG TAB
            >;
        };

        numbers {
            bindings = <
&kp EXCLAMATION  &kp DOUBLE_QUOTES  &kp HASH      &kp AT_SIGN           &kp PERCENT             &kp N6    &kp N7        &kp N8        &kp N9        &kp N0
&kp QUESTION     &kp CAPS           &kp C_VOL_DN  &kp C_VOL_UP          &trans                  &kp LEFT  &kp NUMBER_4  &kp N5        &kp NUMBER_6  &kp PLUS
&trans           &trans             &trans        &kp C_BRIGHTNESS_DEC  &kp C_BRIGHTNESS_INC    &kp N0    &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &bootloader
                                                  &trans                &trans                  &trans    &kp N0
            >;
        };

        specialchars {
            bindings = <
&kp EXCL      &kp DOUBLE_QUOTES  &kp HASH  &kp AT_SIGN  &kp PERCENT        &kp AMPERSAND  &kp SLASH             &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp EQUAL
&kp QUESTION  &kp DOLLAR         &kp PIPE  &kp GRAVE    &default_report    &trans         &kp NON_US_BACKSLASH  &kp LEFT_BRACE        &kp RIGHT_BRACE        &kp TILDE
&trans        &trans             &trans    &trans       &trans             &kp LESS_THAN  &kp GREATER_THAN      &kp LEFT_BRACKET      &kp RIGHT_BRACKET      &trans
                                           &trans       &trans             &trans         &trans
            >;
        };

        nav {
            bindings = <
&trans  &mkp LCLK       &mmv MOVE_UP    &mkp RCLK        &msc SCRL_UP      &kp PAGE_UP    &kp HOME        &kp UP_ARROW    &kp END          &trans
&trans  &mmv MOVE_LEFT  &mmv MOVE_DOWN  &mmv MOVE_RIGHT  &msc SCRL_DOWN    &kp PAGE_DOWN  &kp LEFT_ARROW  &kp DOWN_ARROW  &kp RIGHT_ARROW  &trans
&trans  &trans          &trans          &trans           &trans            &trans         &trans          &trans          &trans           &trans
                                        &trans           &trans            &trans         &trans
            >;
        };

        function {
            bindings = <
&bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4    &msc SCRL_LEFT  &kp F1  &kp F2   &kp F3   &kp F4
&trans        &trans        &trans        &trans        &bt BT_CLR      &mmv MOVE_LEFT  &kp F5  &kp F6   &kp F7   &kp F8
&trans        &trans        &trans        &trans        &trans          &trans          &kp F9  &kp F10  &kp F11  &kp F12
                                          &trans        &trans          &trans          &trans
            >;
        };
    };
};
